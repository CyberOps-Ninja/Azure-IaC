#!/bin/bash
# pre-requisites
echo validating pre-requisites
az extension add --name virtual-wan 
az extension add --name azure-firewall
# or updating vWAN and AzFirewall CLI extensions
az extension update --name virtual-wan
az extension update --name azure-firewall 

# parameters/variables - resource group name and location
rg="RG-VWAN-2-ArubaVGW-IaC"
location="eastus"
# parameters/variables for first vwan, hub, and firewall
vwan1name="VWAN-1-DataCenter"
hub1name="Hub-1-DataCenter"
address_prefix_hub1="10.175.0.0/24"
# parameters/variables for secondary vwan, hub, and firewall
vwan2name="VWAN-2-Internet"
hub2name="Hub-2-Internet"
address_prefix_hub2="10.182.0.0/24"
# parameters/variables for firewall sku in both vwans
firewallsku="Premium"
# parameters/variables for spoke vnet 1
vnetspokename1="VNet-Sandbox-E1"
address_prefix_sp_vnet1="10.175.1.0/24"
subnetname1="Subnet-Sandbox-E1-Main"
subnet_prefix_1="10.175.1.0/25"
# parameters/variables for spoke vnet 2
vnetspokename2="VNet-Sandbox-P6"
address_prefix_sp_vnet2="10.175.2.0/24"
subnetname2="Subnet-Sandbox-P6-Main"
subnet_prefix_2="10.175.2.0/25"
# parameters/variables for spoke vnet 3
vnetspokename3="VNet-Sandbox-InfraMgmt"
address_prefix_sp_vnet3="10.175.3.0/24"
subnetname3="Subnet-Sandbox-InfraMgmt-Main"
subnet_prefix_3="10.175.3.0/25"
# parameters/variables for Aruba VGW's pre-requisites
vnetnamevgw="VNet-Sandbox-ArubaVGW"
address_prefix_vgw="10.181.0.0/16"
subnetnamevgw="Azure-Services-Subnet"
subnet_prefix_vgw="10.181.1.0/24"
nsgnamevgw="NSG-Sandbox-ArubaVGW"
sshkeynamevgw="SSH-Key-Sandbox-ArubaVGW"
# parameters/variables for linux machines
username="azurelinuxadmin"
password="Az-Linux@R00t"
vmsize=Standard_DS1_v2
vmname1="VM-Sandbox-E1"
vmname2="VM-Sandbox-P6"
vmname3="VM-Sandbox-InfraMgmt"
nsgname1="NSG-Sandbox-E1"
nsgname2="NSG-Sandbox-P6"
nsgname3="NSG-Sandbox-InfraMgmt"

# parameters/varialbes for my public IP
myazpip=$(curl -4 ifconfig.io -s)

# create resource group in EastUS region
echo "Creating Resource Group"
az group create --name $rg --location $location
echo "Resource Group Deployed"

# create vitual wan
echo "Creating VWAN Hubs"
az network vwan create -g $rg --name $vwan1name --branch-to-branch-traffic true --location $location --type Standard --output none
az network vhub create -g $rg --name $hub1name --address-prefix $address_prefix_hub1 --vwan $vwan1name --location $location --sku Standard --no-wait
az network vwan create -g $rg --name $vwan2name --branch-to-branch-traffic true --location $location --type Standard --output none
az network vhub create -g $rg --name $hub2name --address-prefix $address_prefix_hub2 --vwan $vwan2name --location $location --sku Standard --no-wait
echo "VWAN & Hub Deployed"

# create spoke virtual networks
echo "Creating Spoke VNETs and Subnets"
az network vnet create --address-prefixes $address_prefix_sp_vnet1 -n $vnetspokename1 -g $rg -l $location --subnet-name $subnetname1 --subnet-prefixes $address_prefix_sp_vnet1 --output none
az network vnet create --address-prefixes $address_prefix_sp_vnet2 -n $vnetspokename2 -g $rg -l $location --subnet-name $subnetname2 --subnet-prefixes $address_prefix_sp_vnet2 --output none
az network vnet create --address-prefixes $address_prefix_sp_vnet3 -n $vnetspokename3 -g $rg -l $location --subnet-name $subnetname3 --subnet-prefixes $address_prefix_sp_vnet3 --output none
echo "Spoke VNets and Subnets Deployed"

# crate public ip for vms
echo "Creating PIP for VMs"
az network public-ip create --resource-group $rg --name PIP-$vmname1 --version IPv4 --allocation-method static -sku Standard
az network public-ip create --resource-group $rg --name PIP-$vmname2 --version IPv4 --allocation-method static -sku Standard
az network public-ip create --resource-group $rg --name PIP-$vmname3 --version IPv4 --allocation-method static -sku Standard
echo "PIPs Deployed"

# create nsg
echo "Creating NSGs"
az network nsg create --resource-group $rg --name $nsgname1
az network nsg create --resource-group $rg --name $nsgname2
az network nsg create --resource-group $rg --name $nsgname3
echo "NSGs Deployed"

# update nsg rules
echo "Creating NSG Rules"
az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname1 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none

az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname2 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none

az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname3 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none
echo "NSG Rules Deployed"






# create vm in spoke vnets
echo "Creating VMs in Spoke VNets"
az vm create -n $vmname1 -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $location --subnet $subnetname1 --vnet-name $vnetspokename1 --admin-username $username --admin-password $password --nsg $nsgname1 --no-wait
az vm create -n $vmname2 -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $location --subnet $subnetname2 --vnet-name $vnetspokename2 --admin-username $username --admin-password $password --nsg $nsgname2 --no-wait
az vm create -n $vmname3 -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $location --subnet $subnetname3 --vnet-name $vnetspokename3 --admin-username $username --admin-password $password --nsg $nsgname3 --no-wait
echo "VMs Deployed in Spoke VNets"

# create ArubaVGW VNet
echo "Creating ArubaVGW VNet"
az network vnet create --resource-group $rg --name $vnetnamevgw --address-prefix $address_prefix_vgw --subnet-name $subnetnamevgw --subnet-prefix $subnet_prefix_vgw
echo "ArubaVGW VNet Deployed"

# create ArubaVGW NSG
echo "Creating ArubaVGW NSG"
az network nsg create --resource-group $rg --name $nsgnamevgw
echo "ArubaVGW NSG Deployed"

# create rules in ArubaVGW NSG
echo "Creating ArubaVGW NSG Rules"
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-4500 --protocol Tcp --priority 100 --destination-port-ranges 4500
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-22 --protocol Tcp --priority 110 --destination-port-ranges 22
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-443 --protocol Tcp --priority 120 --destination-port-ranges 443
echo "ArubaVGW NSG Rules Deployed"

# create ssh key for ArubaVGW
echo "Creating ArubaVGW SSH Key Pair"
az sshkey create --location $location --resource-group "$rg" --name $sshkeynamevgw
echo "ArubaVGW SSH Key Pair Deployed, please download private key and store in a safe location"

# check hub provisioning and routing state
echo "Checking Hub1 provisioning status"
prState=''
rtState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub show -g $rg -n $hub1name --query 'provisioningState' -o tsv)
    echo "$hub1name provisioningState="$prState
    sleep 5
done

while [[ $rtState != 'Provisioned' ]];
do
    rtState=$(az network vhub show -g $rg -n $hub1name --query 'routingState' -o tsv)
    echo "$hub1name routingState="$rtState
    sleep 5
done

# check hub vnet connections
echo "Creating Hub1 vNet connections"
az network vhub connection create -n Spoke-$vnetspokename1-Connection --remote-vnet $vnetspokename1 -g $rg --vhub-name $hub1name --no-wait
az network vhub connection create -n Spoke-$vnetspokename2-Connection --remote-vnet $vnetspokename2 -g $rg --vhub-name $hub1name --no-wait
az network vhub connection create -n Spoke-$vnetspokename3-Connection --remote-vnet $vnetspokename3 -g $rg --vhub-name $hub1name --no-wait
echo "Hub1 vNet Connections Deployed"

# validating provisioning state of each spoke vnet's connection
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n Spoke-$vnetspokename1-Connection --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection Spoke-$vnetspokename1-Connection provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n Spoke-$vnetspokename2-Connection --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection Spoke-$vnetspokename2-Connection provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n Spoke-$vnetspokename3-Connection --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection Spoke-$vnetspokename3-Connection provisioningState="$prState
    sleep 5
done

# create vhub vpn gateway
echo "Creating vHub VPN Gateway"
az network vpn-gateway create -n VPNGW-$hub1name -g $rg --location $location --vhub $hub1name --no-wait
az network vpn-gateway create -n VPNGW-$hub2name -g $rg --location $location --vhub $hub2name --no-wait
echo "vHub VPN Gateway Deployed"

# vwan hub vpn gateway status
echo "Validating vHubs VPN Gateways Provisioning"
prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub1name --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo "VPN Gateway is in fail state. Deleting and rebuilding."
    az network vpn-gateway delete -n VPNGW-$hub1name -g $rg
    az network vpn-gateway create -n VPNGW-$hub1name -g $rg --location $location --vhub $hub1name --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub1name --query provisioningState -o tsv)
        echo VPNGW-$hub1name "provisioningState="$prState
        sleep 5
    done
fi

prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub2name --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo "VPN Gateway is in fail state. Deleting and rebuilding."
    az network vpn-gateway delete -n VPNGW-$hub2name -g $rg
    az network vpn-gateway create -n VPNGW-$hub2name -g $rg --location $location --vhub $hub2name --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub2name --query provisioningState -o tsv)
        echo VPNGW-$hub2name "provisioningState="$prState
        sleep 5
    done
fi

## install tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others
nettoolsuri="https://raw.githubusercontent.com/CyberOps-Ninja/Azure-IaC/main/Project-Azure-CLI/Azure-Net-Tools/vm-net-tools.sh"
for vm in `az vm list -g $rg --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --force-update \
 --no-wait
done

# create firewall policy and rules
echo "Creating Azure Firewall Policy"
fwpolicyname1=FwPolicy-$hub1name #firewall policy name for first Hub
fwpolicyname2=FwPolicy-$hub2name #firewall policy name for second Hub
az network firewall policy create --name $fwpolicyname1 --resource-group $rg --sku $firewallsku --enable-dns-proxy false --output none
az network firewall policy create --name $fwpolicyname2 --resource-group $rg --sku $firewallsku --enable-dns-proxy false --output none
az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname1 --resource-group $rg --output none
az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname2 --resource-group $rg --output none

# adding an allow ICMP any-to-any firewall rule
az network firewall policy rule-collection-group collection add-filter-collection \
  --resource-group $rg \
  --policy-name $fwpolicyname1 \
  --name IPv4RoutingCollection \
  --rcg-name NetworkRuleCollectionGroup \
  --rule-type NetworkRule \
  --rule-name Allow-ICMP \
  --action Allow \
  --ip-protocols "ICMP" \
  --source-addresses "*" \
  --destination-addresses  "*" \
  --destination-ports "*" \
  --collection-priority 100 \
  --output none

az network firewall policy rule-collection-group collection add-filter-collection \
  --resource-group $rg \
  --policy-name $fwpolicyname2 \
  --name IPv4RoutingCollection \
  --rcg-name NetworkRuleCollectionGroup \
  --rule-type NetworkRule \
  --rule-name Allow-ICMP \
  --action Allow \
  --ip-protocols "ICMP" \
  --source-addresses "*" \
  --destination-addresses  "*" \
  --destination-ports "*" \
  --collection-priority 100 \
  --output none

# creates and deploys azure firewalls inside vhubs
echo "Configuring Azure Firewall inside vHub"
fwpolicyid1=$(az network firewall policy show --resource-group $rg --name $fwpolicyname1 --query id --output tsv)
az network firewall create -g $rg -n AzFw-$hub1name --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub1name --public-ip-count 1 --firewall-policy $fwpolicyid1 --location $location --output none
fwpolicyid2=$(az network firewall policy show --resource-group $rg --name $fwpolicyname2 --query id --output tsv)
az network firewall create -g $rg -n AzFw-$hub2name --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub2name --public-ip-count 1 --firewall-policy $fwpolicyid2 --location $location --output none

msinsights=$(az provider show -n microsoft.insights --query registrationState -o tsv)
if [ $msinsights == 'NotRegistered' ] || [ $msinsights == 'Unregistered' ]; then
az provider register -n microsoft.insights --accept-terms
 prState=''
 while [[ $prState != 'Registered' ]];
 do
    prState=$(az provider show -n microsoft.insights --query registrationState -o tsv)
    echo "MS Insights State="$prState
    sleep 5
 done
fi
echo "Azure Firewall Deployed inside vHub"

# log analytics workspace name
echo "Enabling Azure Firewall Diagnostics"
workspacename1=Log-Sandbox-$hub1name
workspacename2=Log-Sandbox-$hub2name

# creating log analytics workspaces
az monitor log-analytics workspace create -g $rg --workspace-name $workspacename1 --location $location
az monitor log-analytics workspace create -g $rg --workspace-name $workspacename2 --location $location
echo "Azure Firewall Diagnostics Log Deployed"

# enabling azure firewall diagnostics
# az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name AzFw-$hub1name --resource-group $rg --query id -o tsv)
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name AzFw-$hub1name --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $workspacename1 --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]' \
--output none

# az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name AzFw-$hub2name --resource-group $rg --query id -o tsv)
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name AzFw-$hub2name --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $workspacename2 --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]' \
--output none

echo "Deployment Has Finished"