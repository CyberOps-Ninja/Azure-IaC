#!/bin/bash
# set color variables
error_color="\033[31m"
success_color="\033[32m"
info_color="\033[33m"
reset_color="\033[0m"

# pre-requisites
echo -e "${info_color}Validating Pre-requisites${reset_color}"
az extension add --name virtual-wan 
az extension add --name azure-firewall
# or updating vWAN and AzFirewall CLI extensions
az extension update --name virtual-wan
az extension update --name azure-firewall 

# parameters/variables - resource group name and location
rg="RG-VWAN-2-ArubaVGW-IaC"
location="eastus"
# parameters/variables for first vwan, vhub, and firewall
vwan1name="VWAN-1-DataCenter"
hub1name="Hub-1-DataCenter"
address_prefix_hub1="10.175.0.0/24"
# parameters/variables for secondary vwan, vhub, and firewall
vwan2name="VWAN-2-Internet"
hub2name="Hub-2-Internet"
address_prefix_hub2="10.182.0.0/24"
# parameters/variables for firewall sku in both vwans
firewallsku="Premium"
# parameters/variables for spoke vnet 1
vnetspokename1="VNet-Sandbox-E1"
address_prefix_sp_vnet1="10.175.1.0/24"
subnetname1="Subnet-Sandbox-E1-Main"
subnet_prefix_1="10.175.1.0/25"
# parameters/variables for spoke vnet 2
vnetspokename2="VNet-Sandbox-P6"
address_prefix_sp_vnet2="10.175.2.0/24"
subnetname2="Subnet-Sandbox-P6-Main"
subnet_prefix_2="10.175.2.0/25"
# parameters/variables for spoke vnet 3
vnetspokename3="VNet-Sandbox-InfraMgmt"
address_prefix_sp_vnet3="10.175.3.0/24"
subnetname3="Subnet-Sandbox-InfraMgmt-Main"
subnet_prefix_3="10.175.3.0/25"
# parameters/variables for Aruba VGW's pre-requisites
vnetnamevgw="VNet-Sandbox-ArubaVGW"
address_prefix_vgw="10.181.0.0/16"
subnetnamevgw="Azure-Services-Subnet"
subnet_prefix_vgw="10.181.1.0/24"
nsgnamevgw="NSG-Sandbox-ArubaVGW"
sshkeynamevgw="SSH-Key-Sandbox-ArubaVGW"
# parameters/variables for linux machines
username="azurelinuxadmin"
password="Az-Linux@R00t"
vmsize=Standard_DS1_v2
vmname1="VM-Sandbox-E1"
vmname2="VM-Sandbox-P6"
vmname3="VM-Sandbox-InfraMgmt"
nsgname1="NSG-Sandbox-E1"
nsgname2="NSG-Sandbox-P6"
nsgname3="NSG-Sandbox-InfraMgmt"

# parameters/varialbes for my public IP
myazpip=$(curl -4 ifconfig.io -s)

# create resource group in EastUS region
echo -e "${info_color}Creating Resource Group${reset_color}"
az group create --name $rg --location $location
echo -e "${success_color}Resource Group Deployed${reset_color}"

# create vitual wan
echo -e "${info_color}Creating VWAN Hubs${reset_color}"
az network vwan create -g $rg --name $vwan1name --branch-to-branch-traffic true --location $location --type Standard --output none
az network vhub create -g $rg --name $hub1name --address-prefix $address_prefix_hub1 --vwan $vwan1name --location $location --sku Standard --no-wait
az network vwan create -g $rg --name $vwan2name --branch-to-branch-traffic true --location $location --type Standard --output none
az network vhub create -g $rg --name $hub2name --address-prefix $address_prefix_hub2 --vwan $vwan2name --location $location --sku Standard --no-wait
echo -e "${success_color}VWAN & Hub Deployed${reset_color}"

# create spoke virtual networks
echo -e "${info_color}Creating Spoke VNETs and Subnets${reset_color}"
az network vnet create --address-prefixes $address_prefix_sp_vnet1 -n $vnetspokename1 -g $rg -l $location --subnet-name $subnetname1 --subnet-prefixes $address_prefix_sp_vnet1 --output none
az network vnet create --address-prefixes $address_prefix_sp_vnet2 -n $vnetspokename2 -g $rg -l $location --subnet-name $subnetname2 --subnet-prefixes $address_prefix_sp_vnet2 --output none
az network vnet create --address-prefixes $address_prefix_sp_vnet3 -n $vnetspokename3 -g $rg -l $location --subnet-name $subnetname3 --subnet-prefixes $address_prefix_sp_vnet3 --output none
echo -e "${success_color}Spoke VNets and Subnets Deployed${reset_color}"

# crate public ip for vms
echo -e "${info_color}Creating PIP for VMs${reset_color}"
az network public-ip create --resource-group $rg --name PIP-$vmname1 --version IPv4 --allocation-method static --sku Standard --zone 1 2 3
az network public-ip create --resource-group $rg --name PIP-$vmname2 --version IPv4 --allocation-method static --sku Standard --zone 1 2 3
az network public-ip create --resource-group $rg --name PIP-$vmname3 --version IPv4 --allocation-method static --sku Standard --zone 1 2 3
echo -e "${success_color}PIPs Deployed${reset_color}"

# create nsg
echo -e "${info_color}Creating NSGs"
az network nsg create --resource-group $rg --name $nsgname1
az network nsg create --resource-group $rg --name $nsgname2
az network nsg create --resource-group $rg --name $nsgname3
echo -e "${success_color}NSGs Deployed${reset_color}"

# update nsg rules
echo -e "${info_color}Creating NSG Rules${reset_color}"
az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname1 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none

az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname2 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none

az network nsg rule create \
  --resource-group $rg \
  --nsg-name $nsgname3 \
  --name "Allow-My-Az-PIP-SSH" \
  --direction Inbound \
  --priority 100 \
  --source-address-prefixes $myazpip \
  --source-port-ranges '*' \
  --destination-address-prefixes '*' \
  --destination-port-ranges 22 \
  --access Allow \
  --protocol Tcp \
  --description "Allow inbound SSH" \
  --output none
echo -e "${success_color}NSG Rules Deployed${reset_color}"

# associate nsg to subnet
echo -e "${info_color}Associating & Updating NSGs to VMs Subnet${reset_color}"
az network vnet subnet update --resource-group $rg --vnet-name $vnetspokename1 --name $subnetname1 --network-security-group $nsgname1
az network vnet subnet update --resource-group $rg --vnet-name $vnetspokename2 --name $subnetname2 --network-security-group $nsgname2
az network vnet subnet update --resource-group $rg --vnet-name $vnetspokename3 --name $subnetname3 --network-security-group $nsgname3
echo -e "${success_color}NSG Updated & Associated to VM Subnet${reset_color}"

# create nic for vm
echo -e "${info_color}Creating NICs for VMs${reset_color}"
az network nic create --resource-group $rg --name NIC-$vmname1 --vnet-name $vnetspokename1 --subnet $subnetname1 --network-security-group $nsgname1 --public-ip-address PIP-$vmname1
az network nic create --resource-group $rg --name NIC-$vmname2 --vnet-name $vnetspokename2 --subnet $subnetname2 --network-security-group $nsgname2 --public-ip-address PIP-$vmname2
az network nic create --resource-group $rg --name NIC-$vmname3 --vnet-name $vnetspokename3 --subnet $subnetname3 --network-security-group $nsgname3 --public-ip-address PIP-$vmname3
echo -e "${success_color}VMs NICs Deployed${reset_color}"

# create vm in spoke vnets
echo -e "${info_color}Creating VMs in Spoke VNets${reset_color}"
az vm create \
  -g $rg \
  -n $vmname1 \
  --image Ubuntu2204 \
  --size $vmsize \
  -l $location \
  --nics NIC-$vmname1 \
  --admin-username $username \
  --admin-password $password \
  --no-wait

az vm create \
  -g $rg \
  -n $vmname2 \
  --image Ubuntu2204 \
  --size $vmsize \
  -l $location \
  --nics NIC-$vmname2 \
  --admin-username $username \
  --admin-password $password \
  --no-wait

az vm create \
  -g $rg \
  -n $vmname3 \
  --image Ubuntu2204 \
  --size $vmsize \
  -l $location \
  --nics NIC-$vmname3 \
  --admin-username $username \
  --admin-password $password \
  --no-wait
echo -e "${success_color}VMs Deployed in Spoke VNets${reset_color}"

# create ArubaVGW VNet
echo -e "${info_color}Creating ArubaVGW VNet${reset_color}"
az network vnet create --resource-group $rg --name $vnetnamevgw --address-prefix $address_prefix_vgw --subnet-name $subnetnamevgw --subnet-prefix $subnet_prefix_vgw
echo -e "${success_color}ArubaVGW VNet Deployed${reset_color}"

# create ArubaVGW NSG
echo -e "${info_color}Creating ArubaVGW NSG${reset_color}"
az network nsg create --resource-group $rg --name $nsgnamevgw
echo -e "${success_color}ArubaVGW NSG Deployed${reset_color}"

# create rules in ArubaVGW NSG
echo -e "${info_color}Creating ArubaVGW NSG Rules${reset_color}"
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-4500 --protocol Tcp --priority 100 --destination-port-ranges 4500 --access Allow --direction Inbound
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-22 --protocol Tcp --priority 110 --destination-port-ranges 22 --access Allow --direction Inbound
az network nsg rule create --resource-group $rg --nsg-name $nsgnamevgw --name Allow-Port-443 --protocol Tcp --priority 120 --destination-port-ranges 443 --access Allow --direction Inbound
echo -e "${success_color}ArubaVGW NSG Rules Deployed${reset_color}"

# create ssh key for ArubaVGW
echo -e "${info_color}Creating ArubaVGW SSH Key Pair${reset_color}"
az sshkey create --location $location --resource-group "$rg" --name $sshkeynamevgw
echo -e "${success_color}ArubaVGW SSH Key Pair Deployed, please download private key and store in a safe location${reset_color}"

# define the function to check the provisioning and routing state of a both vHub
check_vhub_state() {
    local vhub_name=$1

    echo -e "${info_color}Checking $vhub_name Provisioning Status${reset_color}"
    prState=''
    rtState=''

    while [[ $prState != 'Succeeded' ]]; do
        prState=$(az network vhub show -g $rg -n $vhub_name --query 'provisioningState' -o tsv)
        echo -e "${info_color}$vhub_name provisioningState=$prState${reset_color}"
        sleep 5
    done

    while [[ $rtState != 'Provisioned' ]]; do
        rtState=$(az network vhub show -g $rg -n $vhub_name --query 'routingState' -o tsv)
        echo -e "${info_color}$vhub_name routingState=$rtState${reset_color}"
        sleep 5
    done
}

# call function to check the state for vHub1
check_vhub_state $hub1name

# call function to check the state for vHub2
check_vhub_state $hub2name

# check hub vnet connections
echo -e "${info_color}Creating vHub1 vNet connections${reset_color}"
az network vhub connection create -n Spoke-$vnetspokename1-Connection --remote-vnet $vnetspokename1 -g $rg --vhub-name $hub1name --no-wait
az network vhub connection create -n Spoke-$vnetspokename2-Connection --remote-vnet $vnetspokename2 -g $rg --vhub-name $hub1name --no-wait
az network vhub connection create -n Spoke-$vnetspokename3-Connection --remote-vnet $vnetspokename3 -g $rg --vhub-name $hub1name --no-wait
echo -e "${success_color}vHub1 vNet Connections Deployed${reset_color}"

# define the function for checking the provisioning state of a vnet connection
check_provisioning_state() {
    local connection_name=$1
    local hub_name=$2
    local resource_group=$3

    local prState=''
    while [[ $prState != 'Succeeded' ]]; do
        prState=$(az network vhub connection show -n $connection_name --vhub-name $hub_name -g $resource_group --query 'provisioningState' -o tsv)
        echo -e "${info_color}vnet connection $connection_name provisioningState=$prState${reset_color}"
        sleep 5
    done
}

# call the function for each vnet spoke connection
check_provisioning_state "Spoke-$vnetspokename1-Connection" $hub1name $rg
check_provisioning_state "Spoke-$vnetspokename2-Connection" $hub1name $rg
check_provisioning_state "Spoke-$vnetspokename3-Connection" $hub1name $rg

# create vhub vpn gateway
echo -e "${info_color}Creating vHub VPN Gateway${reset_color}"
az network vpn-gateway create -n VPNGW-$hub1name -g $rg --location $location --vhub $hub1name --no-wait
az network vpn-gateway create -n VPNGW-$hub2name -g $rg --location $location --vhub $hub2name --no-wait
echo -e "${success_color}vHub VPN Gateway Deployed${reset_color}"

# vwan vhub vpn gateway status
echo -e "${info_color}Validating vHubs VPN Gateways Provisioning${reset_color}"
prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub1name --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo -e "${error_color}VPN Gateway is in fail state. Deleting and rebuilding.${reset_color}"
    az network vpn-gateway delete -n VPNGW-$hub1name -g $rg
    az network vpn-gateway create -n VPNGW-$hub1name -g $rg --location $location --vhub $hub1name --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub1name --query provisioningState -o tsv)
        echo -e ${info_color}VPNGW-$hub1name "provisioningState="$prState${reset_color}
        sleep 5
    done
fi

prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub2name --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo -e "${error_color}VPN Gateway is in fail state. Deleting and rebuilding.${reset_color}"
    az network vpn-gateway delete -n VPNGW-$hub2name -g $rg
    az network vpn-gateway create -n VPNGW-$hub2name -g $rg --location $location --vhub $hub2name --no-wait
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vpn-gateway show -g $rg -n VPNGW-$hub2name --query provisioningState -o tsv)
        echo -e ${info_color}VPNGW-$hub2name "provisioningState="$prState${reset_color}
        sleep 5
    done
fi

## install tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others
echo -e "${info_color}Installing Linux Tools for Network Connectivity${reset_color}"
nettoolsuri="https://raw.githubusercontent.com/CyberOps-Ninja/Azure-IaC/main/Project-Azure-CLI/Azure-Net-Tools/vm-net-tools.sh"
for vm in `az vm list -g $rg --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --force-update \
 --no-wait
done
echo -e "${success_color}Deployment has Finished"Deployed Linux Tools for Network Connectivity${reset_color}"

# create firewall policy and rules
echo -e "${info_color}Creating Azure Firewall Policy${reset_color}"
fwpolicyname1="FwPolicy-$hub1name" # firewall policy name for first vHub
fwpolicyname2="FwPolicy-$hub2name" # firewall policy name for second vHub
az network firewall policy create --name $fwpolicyname1 --resource-group $rg --sku $firewallsku --enable-dns-proxy false --output none
az network firewall policy create --name $fwpolicyname2 --resource-group $rg --sku $firewallsku --enable-dns-proxy false --output none
az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname1 --resource-group $rg --output none
az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname2 --resource-group $rg --output none

# adding an allow ICMP any-to-any firewall rule
az network firewall policy rule-collection-group collection add-filter-collection \
  --resource-group $rg \
  --policy-name $fwpolicyname1 \
  --name IPv4RoutingCollection \
  --rcg-name NetworkRuleCollectionGroup \
  --rule-type NetworkRule \
  --rule-name Allow-ICMP \
  --action Allow \
  --ip-protocols "ICMP" \
  --source-addresses "*" \
  --destination-addresses "*" \
  --destination-ports "*" \
  --collection-priority 100 \
  --output none

az network firewall policy rule-collection-group collection add-filter-collection \
  --resource-group $rg \
  --policy-name $fwpolicyname2 \
  --name IPv4RoutingCollection \
  --rcg-name NetworkRuleCollectionGroup \
  --rule-type NetworkRule \
  --rule-name Allow-ICMP \
  --action Allow \
  --ip-protocols "ICMP" \
  --source-addresses "*" \
  --destination-addresses "*" \
  --destination-ports "*" \
  --collection-priority 100 \
  --output none

# creates and deploys azure firewalls inside vhubs
echo -e "${info_color}Configuring Azure Firewall inside vHub${reset_color}"
fwpolicyid1=$(az network firewall policy show --resource-group $rg --name $fwpolicyname1 --query id --output tsv)
az network firewall create -g $rg -n AzFw-$hub1name --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub1name --public-ip-count 1 --firewall-policy $fwpolicyid1 --location $location --output none
fwpolicyid2=$(az network firewall policy show --resource-group $rg --name $fwpolicyname2 --query id --output tsv)
az network firewall create -g $rg -n AzFw-$hub2name --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub2name --public-ip-count 1 --firewall-policy $fwpolicyid2 --location $location --output none

msinsights=$(az provider show -n microsoft.insights --query registrationState -o tsv)
if [ $msinsights == 'NotRegistered' ] || [ $msinsights == 'Unregistered' ]; then
az provider register -n microsoft.insights --accept-terms
 prState=''
 while [[ $prState != 'Registered' ]];
 do
    prState=$(az provider show -n microsoft.insights --query registrationState -o tsv)
    echo -e "${info_color}MS Insights State="$prState${reset_color}
    sleep 5
 done
fi
echo -e "${success_color}Azure Firewall Deployed inside vHub${reset_color}"

# log analytics workspace name
echo -e "${info_color}Enabling Azure Firewall Diagnostics${reset_color}"
workspacename1="Log-Sandbox-$hub1name"
workspacename2="Log-Sandbox-$hub2name"

# creating log analytics workspaces
az monitor log-analytics workspace create -g $rg --workspace-name $workspacename1 --location $location
az monitor log-analytics workspace create -g $rg --workspace-name $workspacename2 --location $location
echo -e "${success_color}Deployment has Finished"Azure Firewall Diagnostics Log Deployed${reset_color}"

# enabling azure firewall diagnostics
# az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name AzFw-$hub1name --resource-group $rg --query id -o tsv)
echo -e "${info_color}Enabling Monitor Diagnostic for Azure Firewall${reset_color}"
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name AzFw-$hub1name --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $workspacename1 --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]' \
--output none

# az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name AzFw-$hub2name --resource-group $rg --query id -o tsv)
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name AzFw-$hub2name --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $workspacename2 --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]' \
--output none
echo -e "${success_color}Deployed Monitor Diagnostic for Azure Firewall${reset_color}"

echo -e "${success_color}Deployment has Finished${reset_color}"
echo -e "${success_color}Check your .ssh Directory for Private/Public RSA Keys${reset_color}"